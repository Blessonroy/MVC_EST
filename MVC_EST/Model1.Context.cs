//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_EST
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class D_BEntities : DbContext
    {
        public D_BEntities()
            : base("name=D_BEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Qualification_Tab> Qualification_Tab { get; set; }
        public virtual DbSet<Std_Tab> Std_Tab { get; set; }
        public virtual DbSet<User_Tab> User_Tab { get; set; }
    
        public virtual int sp_addstudent(Nullable<int> stdId, string firstname, string lastname, Nullable<int> age, Nullable<System.DateTime> dOB, string gender, string email, Nullable<long> pnum, string username, string password)
        {
            var stdIdParameter = stdId.HasValue ?
                new ObjectParameter("StdId", stdId) :
                new ObjectParameter("StdId", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var pnumParameter = pnum.HasValue ?
                new ObjectParameter("Pnum", pnum) :
                new ObjectParameter("Pnum", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_addstudent", stdIdParameter, firstnameParameter, lastnameParameter, ageParameter, dOBParameter, genderParameter, emailParameter, pnumParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int sp_GetAllStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAllStudents");
        }
    
        public virtual int sp_Qualification(Nullable<int> studentID, string courseName, string university, Nullable<int> yearOfPassing, Nullable<decimal> percentage)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var yearOfPassingParameter = yearOfPassing.HasValue ?
                new ObjectParameter("YearOfPassing", yearOfPassing) :
                new ObjectParameter("YearOfPassing", typeof(int));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Qualification", studentIDParameter, courseNameParameter, universityParameter, yearOfPassingParameter, percentageParameter);
        }
    
        public virtual int sp_UpdateStudent(Nullable<int> studentId, string firstName, string lastName, Nullable<int> age, Nullable<System.DateTime> dOB, string gender, string email, Nullable<long> phoneNumber, string username, string password)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStudent", studentIdParameter, firstNameParameter, lastNameParameter, ageParameter, dOBParameter, genderParameter, emailParameter, phoneNumberParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_ValidateLogin_Result> sp_ValidateLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidateLogin_Result>("sp_ValidateLogin", usernameParameter, passwordParameter);
        }
    }
}
